# Here quantities related to objects in reduced Horndeski action are defined
#### Give the model its name
model_name = horndeski_model

#### Choose where to save the background and force quantity data
output_directory = /home/c2042999/PCA_project/HiCOLA_files/Growth_comparison_files

#######################
# Horndeski functions #
#######################

# See documentation for meaning of these functions
# The Horndeski functions should be defined in terms of phi, X (see functional dependence
# of the Horndeski functions in the reduced Horndeski action) and
# and real-valued constants. Any constants must be defined in the theory symbols
# that follows.

K = k_1*X
G3 = g_31*X
G4 = 0.5

# e.g.:
#K = k_1*X + k_2*X*X
#G3 = g_31*X + g_32*X*X
#G4 = 0.5

##################
# Theory symbols #
##################
# Here you declare the symbols needed to construct your specific theory.
# Typically this involves giving names to the constants in the model.

#Syntax: left side is the variable name that python will call it by (key), right is a
# string that indicates how the symbol should be displayed (use LaTeX notation) (symbol).
# What appears on the right-hand side should match what you used in your Horndeski function
# definitions.
# e.g. if you define K = a_1*phi*X --- Eq. 1,
# phi and X are already 'known' to be expected symbols for the frontend, as this comes
# from the functional dependence allowed in the Horndeski functions of the reduced
# Horndeski action. However, the constant a_1 is a new symbol defined by a user. 
# Therefore, in this section you declare that a_1 is a symbol by writing
# a1_symbol = "a_1"--- Eq. 2, 
# where the string should match exactly what you used to write
# this constant in Eq. 1.

# The variable name (key) MUST end in "_symbol" (without quotation marks)
# The order in which these are written matter! The following section must have
# parameter values ordered in the same way as you choose to do for the symbols
# here.

# Given the example Horndeski functions in the comments of the Horndeski 
# functions section, the symbols for the constants can be defined as:
k1_symbol = k_1
#k2_symbol =  "k_2"
g31_symbol = g_31
#g32_symbol = "g_32"

###############################
# Horndeski Parameter values  #
###############################
# Set values for the parameters, i.e. constants, introduced in your Horndeski function definitions.
# The key for these parameters must end in _parameter
# The order in which they are defined matter! The order must match the
# symbolic names for these parameters above
# One of these may be ignored if you choose to apply the closure constraint on
# a model parameter. You must still set a dummy value for this parameter though.

# e.g.:
k1_parameter = 0.0
#k2_parameter = -0.29293354841424546
g31_parameter = 1
#g32_parameter = 1.0405243750964335

##################################################
# Fraction of cosmological constant in Omega_DE0 #
##################################################

f_phi = 0.0

#######################
# Initial conditions #
#######################
# Set the initial values of the scalar field, its derivative and the Hubble function.
# One of these may be ignored if you choose to apply the closure constraint on
# an "odeint" variable. You must still set a dummy value for this variable though.

Hubble0 = 1

phiprime0 = 1

###############
# Mass ratios #
###############
# If True, all mass ratios are set to 1 and values below are ignored
set_all_to_one = True

M_pG4 = 1.
M_KG4 = 1.
M_G3s = 1.
M_sG4 = 1.
M_G3G4 = 1.
M_Ks = 1.
M_gp = 1.

#######################
# Closure declaration #
#######################
# Here you decide which variable is solved for via the Friedmann-like closure equation

# This indicates that the variable to be chosen is either the Hubble function, phi_prime, Omega_m or Omega_r
# If this is false, then one of the Horndeski model parameters will be solved through the closure equation instead
use_constraint_eq_on_odeint_variables = False

# This specifies which odeint variable
# 0 = Hubble function; 1 = phi_prime; 2 = Omega_r; 3 = Omega_m
which_odeint_par = 1

# Relies on the order in which the Horndeski parameters are written above
# Only relevant if use_constraint_eq_on_odeint_parameters is False.
# e.g. which_Horndeski_par = 1 means the 2nd parameter of your model will be solved
# for via closure
which_Horndeski_par = 1

# Closure guess value
# This sets the initial guess for the variable that will be numerically solved for through
# the closure equation. This implies that one of the floats supplied as an initial condition
# or as a parameter value will be ignored and the guess_value, and then the result of solving
# the closure equation will be used instead.
closure_guess_value = 0.9
